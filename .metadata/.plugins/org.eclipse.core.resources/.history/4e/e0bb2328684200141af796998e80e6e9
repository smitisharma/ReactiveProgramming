package example

import common._
import scala.annotation.tailrec

object Lists {
	/**
	 * This method computes the sum of all elements in the list xs. There are
	 * multiple techniques that can be used for implementing this method, and
	 * you will learn during the class.
	 *
	 * For this example assignment you can use the following methods in class
	 * `List`:
	 *
	 *  - `xs.isEmpty: Boolean` returns `true` if the list `xs` is empty
	 *  - `xs.head: Int` returns the head element of the list `xs`. If the list
	 *    is empty an exception is thrown
	 *  - `xs.tail: List[Int]` returns the tail of the list `xs`, i.e. the the
	 *    list `xs` without its `head` element
	 *
	 *  ''Hint:'' instead of writing a `for` or `while` loop, think of a recursive
	 *  solution.
	 *
	 * @param xs A list of natural numbers
	 * @return The sum of all elements in `xs`
	 */
	def sum(xs: List[Int]): Int = {
			println(xs)
			if(xs.isEmpty)
				0  
			else xs.head + sum(xs.tail)

				//	def sum(list: List[Int]): Int = list.foldLeft(0)((r,c) => r+c)
				//def sum(list: List[Int]): Int = list.foldLeft(0)(_+_)
	}

	/**
	 * This method returns the largest element in a list of integers. If the
	 * list `xs` is empty it throws a `java.util.NoSuchElementException`.
	 *
	 * You can use the same methods of the class `List` as mentioned above.
	 *
	 * ''Hint:'' Again, think of a recursive solution instead of using looping
	 * constructs. You might need to define an auxiliary method.
	 *
	 * @param xs A list of natural numbers
	 * @return The largest element in `xs`
	 * @throws java.util.NoSuchElementException if `xs` is an empty list
	 */
	def max(xs: List[Int]): Int = {
			var maxVal = xs.head      	  			
					val tailList = xs.tail   				
					println("max="+maxVal+", tail="+tailList)
			if(tailList.isEmpty)
				maxVal
				else{
					val m = max(tailList) 	
							if(maxVal>=m)
								maxVal
								else {
									maxVal = m 
											maxVal}
				}
	}

	def max(xs:List[Int], defaultValue: =>Int):Int = {
			@tailrec
			def max0(xs:List[Int], maxSoFar:Int):Int = xs match {
			case Nil => maxSoFar
			case head::tail => max0(tail, math.max(maxSoFar, head))
			}
			if(xs.isEmpty)
				defaultValue
				else
					max0(xs, Int.MinValue)
	}
}
