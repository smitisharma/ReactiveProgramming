package com.self.collections.FunctionalCombinators

object FunctionalCombinators {
  println("Welcome to the Scala worksheet")
  
 	var numbers = List(1,3,4,5,2,6,7,8,9,10)
 	
  //find returns the first element of a collection that matches a predicate function.
  numbers.find((i: Int) => i > 5)
  
  //drop drops the first i elements. Returns new list but actual
  //list will remain same
	numbers.drop(5)
	
	/*dropWhile removes the first elements that match a predicate function. For example,
	if we dropWhile odd numbers from our list of numbers, 1,3 gets dropped (but not 5 which is “shielded” by 4).*/
	numbers.dropWhile(_ % 2 != 0)
	
	//foldLeft addes all the elements of list from left and store the result in accumulator.
	//initial value accumulator = 0
	numbers.foldLeft(0)((accumulator: Int, listItem: Int) => { accumulator + listItem} )
	
	numbers.foldLeft(0)((accumulator: Int, listItem: Int) => { println(accumulator +" + "+ listItem);	accumulator + listItem} )
           
  	//foldRight addes all the elements of list from right and store the result in accumulator.
  numbers.foldRight(0) { (listItem: Int, accumulator: Int) => println( listItem + " + " + accumulator); listItem + accumulator }
   
   //flatten collapses one level of nested structure.
   List(List(1, 2), List("a", 4)).flatten
   
   
   //FLATMAP
   val nestedMembers = List( List(1,2) , List(3,4))
                                                  
   nestedMembers.map( (x : List[Int]) => x.map(_ *2))
   
 
    
}